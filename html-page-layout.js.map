{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 5e0e5f5ae46af4565cf7","webpack:///./src/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,eAAe,0CAA0C;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,gDAAgD;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA,eAAe,OAAO;;AAEtB,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,eAAe,OAAO;AACtB;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,mBAAmB,IAAI,iBAAiB;AACpH;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,eAAe,OAAO;AACtB,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA","file":"html-page-layout.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"HtmlPageLayout\"] = factory();\n\telse\n\t\troot[\"HtmlPageLayout\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5e0e5f5ae46af4565cf7","'use strict';\n\nconst SPLIT_PARAGRAPH_ID = 'data-split-paragraph-id';\n\nclass HtmlPageLayout {\n    constructor(parent) {\n        /**\n         * @type {Array.<HTMLElement>}\n         */\n        this.pageBodyElements = [];\n\n        this.pageSize = {\n            width: '150mm', // '210mm',\n            height: '70mm' // '297mm'\n        };\n        this.containerStyles = {\n            padding: '10mm 10mm',\n            backgroundColor: '#f5f5f5',\n            width: `calc(${this.pageSize.width} + 20mm)`,\n            position: 'relative'\n        };\n        this.pageStyles = {\n            padding: '20mm 10mm',\n            margin: '0 0 10mm 0',\n            width: this.pageSize.width,\n            height: this.pageSize.height,\n            backgroundColor: '#ffffff'\n        };\n        this.pageBodyStyles = {\n            outline: 0,\n            height: '100%',\n            border: '1px dashed black'\n        };\n        this.splitParagraphId = 1;\n\n        this._createPageContainer(parent);\n        this._appendPage();\n        this._addEventListener();\n    }\n\n    setHtml(html) {\n        const [pageBodyElement] = this.pageBodyElements;\n        pageBodyElement.innerHTML = html;\n\n        setTimeout(() => {\n            this._scrollIntoView(pageBodyElement.parentElement, true);\n        }, 0);\n        setTimeout(() => {\n            this._layout();\n        }, 0);\n    }\n\n    _createPageContainer(parent) {\n        this.container = document.createElement('div');\n        parent.appendChild(this.container);\n\n        this._setContainerStyles();\n    }\n\n    _appendPage(insertParagraph = true) {\n        const pageElement = document.createElement('div');\n        const pageBodyElement = document.createElement('div');\n\n        this._setPageStyles(pageElement);\n        this._setPageBodyStyles(pageBodyElement);\n        this._setEditable(pageBodyElement, true);\n        if (insertParagraph) {\n            this._appendParagraph(pageBodyElement);\n        }\n\n        pageElement.appendChild(pageBodyElement);\n        this.container.appendChild(pageElement);\n\n        this.pageBodyElements.push(pageBodyElement);\n\n        pageElement.setAttribute('data-page-number', this.pageBodyElements.length);\n    }\n\n    _setContainerStyles() {\n        const {padding, backgroundColor, width, position} = this.containerStyles;\n        this.container.style.padding = padding;\n        this.container.style.backgroundColor = backgroundColor;\n        this.container.style.width = width;\n        this.container.style.position = position;\n    }\n\n    _setPageStyles(pageElement) {\n        const {padding, margin, width, height, backgroundColor} = this.pageStyles;\n        pageElement.style.padding = padding;\n        pageElement.style.margin = margin;\n        pageElement.style.width = width;\n        pageElement.style.height = height;\n        pageElement.style.backgroundColor = backgroundColor;\n    }\n\n    /**\n     * Set page body element styles\n     * @param {HTMLElement} pageBodyElement - page body element\n     */\n    _setPageBodyStyles(pageBodyElement) {\n        const {outline, height, border} = this.pageBodyStyles;\n        pageBodyElement.style.outline = outline;\n        pageBodyElement.style.height = height;\n        pageBodyElement.style.border = border;\n\n        pageBodyElement.classList.add('page-body');\n    }\n\n    _setEditable(pageBodyElement, enable) {\n        pageBodyElement.setAttribute('contentEditable', enable);\n    }\n\n    _appendParagraph(pageBodyElement) {\n        const p = document.createElement('p');\n        const br = document.createElement('br');\n\n        p.appendChild(br);\n        pageBodyElement.appendChild(p);\n    }\n\n    /**\n     * Calculate bottom with offset\n     * @param {HTMLElement} element - target element\n     * @returns {number} bottom\n     */\n    _getBottom(element) {\n        let bottom = element.offsetHeight + element.offsetTop;\n        let parent = element.offsetParent;\n        while (parent) {\n            bottom += parent.offsetTop;\n            parent = parent.offsetParent;\n        }\n\n        return bottom;\n    }\n\n    /**\n     * Add event listners to layout pages\n     */\n    _addEventListener() {\n        document.addEventListener('keyup', event => {\n            if (event.target.isContentEditable) {\n                this._layout();\n            }\n        });\n    }\n\n    /**\n     * Get top value of element\n     * @param {HTMLElement} element - target element\n     * @returns {number} top value\n     */\n    _getTop(element) {\n        return element.offsetTop;\n    }\n\n    /**\n     * Layout pages\n     */\n    async _layout() {\n        let pageNumber = 1;\n        while (pageNumber <= this.pageBodyElements.length) {\n            const pageBodyElement = this.pageBodyElements[pageNumber - 1];\n            this._scrollIntoView(pageBodyElement.parentElement);\n            pageNumber = await this._layoutPage(pageNumber);\n        }\n    }\n\n    /**\n     * Layout a page and return next page number\n     * @param {number} pageNumber - page number\n     * @returns {Promise} promise\n     */\n    _layoutPage(pageNumber = 1) {\n        const promise = new Promise((resolve, reject) => {\n            const pageIndex = pageNumber - 1;\n            const totalPageCount = this.pageBodyElements.length;\n            if (pageNumber > totalPageCount || pageNumber > 100) {\n                reject(pageNumber + 1);\n            }\n\n            const pageBodyElement = this.pageBodyElements[pageIndex];\n            const pageBodyBottom = this._getBottom(pageBodyElement);\n            const exceedParagraph = this._findExceedParagraph(pageBodyElement, pageBodyBottom);\n            const insertBodyParagraph = false;\n            let allExceedParagraphs, nextPageBodyElement;\n\n            if (exceedParagraph) {\n                this._splitParagraph(exceedParagraph, pageBodyBottom);\n\n                allExceedParagraphs = this._getExceedAllParagraphs(pageBodyElement, pageBodyBottom);\n                if (pageNumber >= totalPageCount) {\n                    this._appendPage(insertBodyParagraph);\n                }\n\n                nextPageBodyElement = this.pageBodyElements[pageIndex + 1];\n                this._insertParagraphsToBodyAtFirst(nextPageBodyElement, allExceedParagraphs);\n                setTimeout(() => {\n                    this._scrollIntoView(nextPageBodyElement.parentElement);\n                }, 0);\n                setTimeout(() => {\n                    resolve(pageNumber + 1);\n                }, 0);\n            }\n\n            setTimeout(() => {\n                resolve(pageNumber + 1);\n            }, 0);\n        });\n\n        return promise;\n    }\n\n    /**\n     * Find a first exceed paragraph\n     * @param {HTMLElement} pageBodyElement - page body element\n     * @param {number} pageBodyBottom - page bottom\n     * @returns {HtmlElement} a first exceed paragraph\n     */\n    _findExceedParagraph(pageBodyElement, pageBodyBottom) {\n        const paragraphs = pageBodyElement.querySelectorAll('p');\n        const {length} = paragraphs;\n\n        for (let i = 0; i < length; i += 1) {\n            const paragraph = paragraphs[i];\n            const paragraphBottom = this._getBottom(paragraph);\n            if (pageBodyBottom < paragraphBottom) {\n                return paragraph;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Get all exceed paragraphs\n     * @param {HTMLElement} pageBodyElement - page body element\n     * @param {number} pageBodyBottom - page bottom\n     * @returns {Array.<HTMLElement>} all exceed paragraph array\n     */\n    _getExceedAllParagraphs(pageBodyElement, pageBodyBottom) {\n        const paragraphs = pageBodyElement.querySelectorAll('p');\n        const {length} = paragraphs;\n        const exceedParagraphs = [];\n\n        for (let i = 0; i < length; i += 1) {\n            const paragraph = paragraphs[i];\n            const paragraphBottom = this._getBottom(paragraph);\n            if (pageBodyBottom < paragraphBottom) {\n                exceedParagraphs.push(paragraph);\n            }\n        }\n\n        // Remain a bigger paragraph than page height.\n        if (paragraphs.length === exceedParagraphs.length) {\n            exceedParagraphs.shift();\n        }\n\n        return exceedParagraphs;\n    }\n\n    /**\n     * Insert paragraphs to body at first\n     * @param {HTMLElement} pageBodyElement - page body element\n     * @param {Array.<HTMLElement>} paragraphs - paragraph array\n     */\n    _insertParagraphsToBodyAtFirst(pageBodyElement, paragraphs) {\n        if (pageBodyElement.firstChild) {\n            // merge split paragraphs before.\n            paragraphs.slice().reverse().forEach(paragraph => {\n                const splitParagraphId = paragraph.getAttribute(SPLIT_PARAGRAPH_ID);\n                let appended = false;\n                if (splitParagraphId) {\n                    const nextParagraph = pageBodyElement.querySelector(`[${SPLIT_PARAGRAPH_ID}=\"${splitParagraphId}\"]`);\n                    if (nextParagraph) {\n                        const {firstChild} = nextParagraph;\n                        paragraph.childNodes.forEach(\n                            node => nextParagraph.insertBefore(node, firstChild)\n                        );\n\n                        paragraph.parentElement.removeChild(paragraph);\n                        appended = true;\n                    }\n                }\n\n                if (!appended) {\n                    pageBodyElement.insertBefore(paragraph, pageBodyElement.firstChild);\n                }\n            });\n        } else {\n            paragraphs.forEach(\n                paragraph => pageBodyElement.appendChild(paragraph)\n            );\n        }\n    }\n\n    /* eslint-disable complexity */\n    /**\n     * Split a paragraph to two paragraphs\n     * @param {HTMLElement} paragraph - paragraph element\n     * @param {number} pageBodyBottom - bottom of element to be split\n     */\n    _splitParagraph(paragraph, pageBodyBottom) {\n        const textNodes = [];\n        const wrappers = [];\n        const lines = [];\n        const treeWalker = document.createTreeWalker(paragraph);\n        const selection = document.getSelection();\n        let range = null;\n\n        if (selection.rangeCount) {\n            range = selection.getRangeAt(0);\n        }\n\n        // find text nodes\n        while (treeWalker.nextNode()) {\n            const node = treeWalker.currentNode;\n            if (node.nodeType === Node.TEXT_NODE) {\n                textNodes.push(node);\n            }\n        }\n\n        // wrap text nodes with span\n        textNodes.forEach(textNode => {\n            const texts = textNode.textContent.split('');\n            texts.forEach((chararcter, index) => {\n                const span = document.createElement('span');\n                span.innerText = chararcter;\n                wrappers.push(span);\n\n                textNode.parentElement.insertBefore(span, textNode);\n\n                // for keeping the cursor\n                if (range\n                    && range.startContainer === textNode\n                    && range.startOffset === index) {\n                    range.setStartBefore(span);\n                    range.setEndBefore(span);\n                }\n            });\n\n            textNode.parentElement.removeChild(textNode);\n        });\n\n        // recognize lines\n        let prevSpan;\n        wrappers.forEach(span => {\n            const prevSpanBottom = prevSpan ? prevSpan.getBoundingClientRect().bottom : 0;\n            const spanTop = span.getBoundingClientRect().top;\n            if (prevSpanBottom < spanTop) {\n                lines.push(span);\n            }\n            prevSpan = span;\n        });\n\n        // find a exceed first line\n        let nextParagraphCharacters = [];\n        const {length} = lines;\n        for (let i = 0; i < length; i += 1) {\n            const line = lines[i];\n            const lineBottom = this._getBottom(line);\n            if (lineBottom > pageBodyBottom) {\n                const splitIndex = wrappers.indexOf(line);\n                nextParagraphCharacters = wrappers.slice(splitIndex);\n                break;\n            }\n        }\n\n        // split the paragraph to two paragraphs\n        const extractRange = document.createRange();\n        extractRange.setStartBefore(nextParagraphCharacters[0]);\n        extractRange.setEndAfter(nextParagraphCharacters[nextParagraphCharacters.length - 1]);\n\n        const fragment = extractRange.extractContents();\n        const nextParagraph = paragraph.cloneNode();\n        nextParagraph.innerHTML = '';\n\n        nextParagraph.appendChild(fragment);\n        paragraph.parentElement.insertBefore(nextParagraph, paragraph.nextSibling);\n\n        if (!paragraph.hasAttribute(SPLIT_PARAGRAPH_ID)) {\n            paragraph.setAttribute(SPLIT_PARAGRAPH_ID, this.splitParagraphId);\n            nextParagraph.setAttribute(SPLIT_PARAGRAPH_ID, this.splitParagraphId);\n            this.splitParagraphId += 1;\n        }\n\n        // unwrap text nodes\n        wrappers.forEach(span => {\n            if (span.parentElement) {\n                const textNode = span.firstChild;\n                span.removeChild(textNode);\n                span.parentElement.insertBefore(textNode, span);\n                span.parentElement.removeChild(span);\n            }\n        });\n\n        // keep the cursor\n        if (range) {\n            selection.removeAllRanges();\n            selection.addRange(range);\n        }\n\n        paragraph.normalize();\n        nextParagraph.normalize();\n    }\n\n    /**\n     * Scroll to the element\n     * @param {HTMLElement} element - target element\n     * @param {boolean} immediatly - no smooth\n     */\n    _scrollIntoView(element, immediatly) {\n        // element.scrollIntoView({\n        //     block: 'start',\n        //     behavior: immediatly ? 'auto' : 'smooth'\n        // });\n    }\n}\n\nmodule.exports = HtmlPageLayout;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}